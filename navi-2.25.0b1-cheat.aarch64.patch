diff --git a/Cargo.lock b/Cargo.lock
index 064197e..a4d4bb4 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -375,7 +375,7 @@ dependencies = [
 
 [[package]]
 name = "navi"
-version = "2.25.0-beta1"
+version = "2.25.0-beta1-client-cheat"
 dependencies = [
  "anyhow",
  "clap",
diff --git a/Cargo.toml b/Cargo.toml
index b0fdda4..de2aaab 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "navi"
-version = "2.25.0-beta1"
+version = "2.25.0-beta1-client-cheat"
 authors = ["Denis Isidoro <denis_isidoro@live.com>", "Alexis Opolka <alexis.opolka@protonmail.com>"]
 edition = "2021"
 description = "An interactive cheatsheet tool for the command-line"
diff --git a/src/clients/cheat.rs b/src/clients/cheat.rs
new file mode 100644
index 0000000..5842cdb
--- /dev/null
+++ b/src/clients/cheat.rs
@@ -0,0 +1,88 @@
+use crate::config::CONFIG;
+use crate::prelude::*;
+use std::process::{Command, Stdio};
+
+static VERSION_DISCLAIMER: &str =
+    "The cheat client local detail and install from https://github.com/cheat/cheat)
+ you test cheat commad you config is god $cheat --path=<name> <cheat>";
+
+//--- from Cheatsh.rc
+fn map_line(line: &str) -> String {
+    line.trim().trim_end_matches(':').to_string()
+}
+
+fn as_lines(query: &str, markdown: &str) -> Vec<String> {
+    format!(
+        "% {query}, cheat
+{markdown}"
+    )
+    .lines()
+    .map(map_line)
+    .collect()
+}
+
+//---
+
+pub fn call(query: &str) -> Result<Vec<String>> {
+    let cheat_cfg = CONFIG.cheat();
+    let cheat_opt = if !cheat_cfg.is_empty() { &cheat_cfg } else { "--path=community" };
+    //eprintln!("Debug: cheat_cfg={:?} cheat_opy={}", cheat_opt, cheat_opt);
+    let args = [cheat_opt, query];
+
+    let child = Command::new("cheat")
+        .args(args)
+        .stdin(Stdio::piped())
+        .stdout(Stdio::piped())
+        .stderr(Stdio::piped())
+        .spawn();
+
+    let child = match child {
+        Ok(x) => x,
+        Err(_) => {
+            let msg = format!(
+                "navi was unable to call tldr.
+Make sure tldr is correctly installed.
+
+Note:
+{VERSION_DISCLAIMER}
+"
+            );
+            return Err(anyhow!(msg));
+        }
+    };
+
+    let out = child.wait_with_output().context("Failed to wait for tldr")?;
+
+    if let Some(0) = out.status.code() {
+        let stdout = out.stdout;
+        let markdown = String::from_utf8(stdout).context("Output is invalid utf8")?;
+        let cheat_cmd = format!("# **Run command 'cheat {cheat_opt} {query}' to show cheat** \n cheat {cheat_opt} {query} \n #" ) ;
+        let markdown = format!("{}{}", cheat_cmd, markdown);
+        // eprintln!("Debug: markdown = {}", markdown);
+        let lines = as_lines(query, &markdown);
+        Ok(lines)
+    } else {
+        let msg = format!(
+            "Failed to call:
+cheat {}
+
+Output:
+{}
+
+Error:
+{}
+
+Note:
+The cheat client local detail and install from https://github.com/cheat/cheat)
+config option --path=<nae> or --tags=<tag>. you caht test opt $cheat --path=<name> <cheat>
+If you are already using a supported version you can ignore this message.
+{}
+",
+            args.join(" "),
+            String::from_utf8(out.stdout).unwrap_or_else(|_e| "Unable to get output message".to_string()),
+            String::from_utf8(out.stderr).unwrap_or_else(|_e| "Unable to get error message".to_string()),
+            VERSION_DISCLAIMER,
+        );
+        Err(anyhow!(msg))
+    }
+}
diff --git a/src/clients/mod.rs b/src/clients/mod.rs
index 1f0dbcd..c01c858 100644
--- a/src/clients/mod.rs
+++ b/src/clients/mod.rs
@@ -1,2 +1,3 @@
 pub mod cheatsh;
+pub mod cheat;
 pub mod tldr;
diff --git a/src/commands/core/mod.rs b/src/commands/core/mod.rs
index 00e3a35..08489c4 100644
--- a/src/commands/core/mod.rs
+++ b/src/commands/core/mod.rs
@@ -1,6 +1,6 @@
 mod actor;
 
-use crate::clients::{cheatsh, tldr};
+use crate::clients::{cheatsh, cheat, tldr};
 use crate::config::Source;
 use crate::deser;
 use crate::filesystem;
@@ -54,6 +54,11 @@ pub fn get_fetcher() -> Result<Box<dyn Fetcher>> {
             let fetcher = Box::new(StaticFetcher::new(lines));
             Ok(fetcher)
         }
+        Source::Cheat(query) => {
+            let lines = cheat::call(&query)?;
+            let fetcher = Box::new(StaticFetcher::new(lines));
+            Ok(fetcher)
+        }
         Source::Tldr(query) => {
             let lines = tldr::call(&query)?;
             let fetcher = Box::new(StaticFetcher::new(lines));
diff --git a/src/config/cli.rs b/src/config/cli.rs
index c6f86f9..66e8c8e 100644
--- a/src/config/cli.rs
+++ b/src/config/cli.rs
@@ -23,6 +23,7 @@ use clap::{crate_version, Parser, Subcommand};
     navi fn welcome                              # show cheatsheets for navi itself
     navi --print                                 # doesn't execute the snippet
     navi --tldr docker                           # search for docker cheatsheets using tldr
+    navi --cheat docker                          # search for docker cheatshetts using cheat local
     navi --cheatsh docker                        # search for docker cheatsheets using cheatsh
     navi --path '/some/dir:/other/dir'           # use .cheat files from custom paths
     navi --query git                             # filter results by \"git\"
@@ -64,6 +65,10 @@ pub(super) struct ClapConfig {
     #[arg(long)]
     pub tag_rules: Option<String>,
 
+    /// Searches for cheatsheets using the cheat local 
+    #[arg(long)]
+    pub cheat: Option<String>,
+
     /// Searches for cheatsheets using the cheat.sh repository
     #[arg(long)]
     pub cheatsh: Option<String>,
@@ -121,6 +126,7 @@ pub enum Command {
 pub enum Source {
     Filesystem(Option<String>),
     Tldr(String),
+    Cheat(String),
     Cheats(String),
     Welcome,
 }
diff --git a/src/config/mod.rs b/src/config/mod.rs
index cf7f990..c0c0e21 100644
--- a/src/config/mod.rs
+++ b/src/config/mod.rs
@@ -48,6 +48,8 @@ impl Config {
     pub fn source(&self) -> Source {
         if let Some(query) = self.clap.tldr.clone() {
             Source::Tldr(query)
+        } else if let Some(query) = self.clap.cheat.clone() {
+            Source::Cheat(query)
         } else if let Some(query) = self.clap.cheatsh.clone() {
             Source::Cheats(query)
         } else if let Some(Command::Fn(input)) = self.cmd() {
@@ -134,6 +136,10 @@ impl Config {
         self.yaml.client.tealdeer
     }
 
+    pub fn cheat(&self) -> String {
+        self.yaml.client.cheat.clone()
+    }
+
     pub fn shell(&self) -> String {
         self.yaml.shell.command.clone()
     }
diff --git a/src/config/yaml.rs b/src/config/yaml.rs
index 943d979..997f401 100644
--- a/src/config/yaml.rs
+++ b/src/config/yaml.rs
@@ -84,6 +84,7 @@ pub struct Shell {
 #[derive(Default)]
 pub struct Client {
     pub tealdeer: bool,
+    pub cheat: String,
 }
 
 #[derive(Deserialize, Debug)]
